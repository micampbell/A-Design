(h-beam
 (length width thick E)
 (;; x-force1
  (((0 4) (1 0) (1 4))  
   (lambda (x1 fx2 x2) 
     (cond (fx2)
	   ((and x1 x2)
	    (list '/ (list '* 'E 'width 'thick (list '- x1 x2)) 'length))))) 
  ;; y-force1
  (((0 2) (0 5) (0 6) (1 1) (1 2) (1 5) (1 6)) 
   (lambda (m1 y1 a1 fy2 m2 y2 a2) 
     (cond (fy2)
	   ((and m1 m2) (list '/ (list '+ m2 m1) 'length))
	   ((and y1 y2 a1 a2)
	    (list '+ (list '/ (list '* 'E 'thick 'width 'width 'width 
				    (list '- y1 y2)) 
			   'length 'length 'length)
		  (list '/ (list '* 'E 'thick 'width 'width 'width 
				 (list '- a2 a1)) 
			2 'length 'length))))))
  ;; moment1
  (((0 1) (0 5) (0 6) (1 2) (1 5) (1 6))
   (lambda (fy1 y1 a1 m2 y2 a2) 
     (cond ((and m2 fy1) (list '- (list '* 'length fy1) m2))
	   ((and y1 y2 a1 a2)
	    (list '+ (list '/ (list '* 'E 'thick 'width 'width 'width 
				    (list '- a1 a2)) 3 'length)
		  (list '/ (list '* 'E 'thick 'width 'width 'width 
				 (list '- y1 y2)) 2 'length 'length))))))
  ;; current1
  (((1 3))
   (lambda (i2)
     (cond (i2))))
  ;; x-displacement1
  (((0 0) (1 4))
   (lambda (fx1 x2)
     (cond ((fx1 x2) 
	    (list '+ x2 (list '/ fx1 (list '/ 'length 
					   (list '* 'width 'thick 'E))))))))
  ;; y-displacement1
  (((0 1) (0 2) (1 5))
   (lambda (fy1 m1 y2)
     (cond ((and fy1 m1 y2)
	    (list '+ y2 (list '/ (list '* 4 'length 'length 'length fy1)
			      (list '* 'E 'thick 'width 'width 'width))
		  (list '- (list '/ (list '* 6 'length 'length m1)
				 (list '* 'E 'thick 'width 'width 'width))))))))
  ;; angle-displacement1
  (((0 1) (0 2) (1 6))
   (lambda (fy1 m1 a2)
     (cond ((fy1 m1 a2)
	    (list '+ a2 (list '- (list '/ (list '* 6 'length 'length fy1)
				       (list '* 'E 'thick 'width 'width 'width)))
		  (list '/ (list '* 12 'length m1)
			(list '* 'E 'thick 'width 'width 'width)))))))
  ;; voltage1
  (((1 7))
   (lambda (v2)
     (cond (v2))))
  ;; x-force2
  (((1 4) (0 0) (0 4))  
   (lambda (x2 fx1 x1) 
     (cond (fx1)
	   ((and x2 x1)
	    (list '/ (list '* 'E 'width 'thick (list '- x2 x1)) 'length))))) 
  ;; y-force2
  (((1 2) (1 5) (1 6) (0 1) (0 2) (0 5) (0 6)) 
   (lambda (m2 y2 a2 fy1 m1 y1 a1) 
     (cond (fy1)
	   ((and m2 m1) (list '/ (list '- (list '+ m1 m2)) 'length))
	   ((and y2 y1 a2 a1)
	    (list '+ (list '/ (list '* 'E 'thick 'width 'width 'width 
				    (list '- y2 y1)) 
			   'length 'length 'length)
		  (list '/ (list '* 'E 'thick 'width 'width 'width 
				 (list '- a1 a2)) 
			2 'length 'length))))))
  ;; moment2
  (((1 1) (1 5) (1 6) (0 2) (0 5) (0 6))
   (lambda (fy2 y2 a2 m1 y1 a1) 
     (cond ((and m1 fy2) (list '- (list '+ (list '* 'length fy2) m1)))
	   ((and y2 y1 a2 a1)
	    (list '- (list '/ (list '* 'E 'thick 'width 'width 'width 
				    (list '- a2 a1)) 3 'length)
		  (list '/ (list '* 'E 'thick 'width 'width 'width 
				 (list '- y2 y1)) 2 'length 'length))))))
  ;; current2
  (((0 3))
   (lambda (i1)
     (cond (i1))))
  ;; x-displacement2
  (((1 0) (0 4))
   (lambda (fx2 x1)
     (cond ((fx2 x1) 
	    (list '+ x1 (list '/ fx2 (list '/ 'length 
					   (list '* 'width 'thick 'E))))))))
  ;; y-displacement2
  (((1 1) (1 2) (0 5))
   (lambda (fy2 m2 y1)
     (cond ((and fy2 m2 y1)
	    (list '+ y1 (list '/ (list '* 4 'length 'length 'length fy2)
			      (list '* 'E 'thick 'width 'width 'width))
		  (list '/ (list '* 6 'length 'length m2)
			(list '* 'E 'thick 'width 'width 'width)))))))
  ;; angle-displacement2
  (((1 1) (1 2) (0 6))
   (lambda (fy2 m2 a1)
     (cond ((fy2 m2 a1)
	    (list '+ a1 (list '/ (list '* 6 'length 'length fy2)
			      (list '* 'E 'thick 'width 'width 'width)) 
		  (list '/ (list '* 12 'length m2)
			(list '* 'E 'thick 'width 'width 'width)))))))
  ;; voltage2
  (((0 7))
   (lambda (v1)
     (cond (v1)))))
 (((1 0 0 (- L)) (0 1 0 0) (0 1 0 0) (0 0 0 1))
  ((1 0 0 L) (0 1 0 0) (0 1 0 0) (0 0 0 1)))
 ((nil nil (integ integ integ none) power (trans-x trans-y rot-z elect) nil (west north south) nil)
  (nil nil (integ integ integ none) power (trans-x trans-y rot-z elect) nil (north east south) nil)))

(v-beam
 (length width thick E)
 (;; x-force1
  (((0 2) (0 4) (0 6) (1 0) (1 2) (1 4) (1 6)) 
   (lambda (m1 x1 a1 fx2 m2 x2 a2) 
     (cond (fx2)
	   ((and m1 m2) (list '/ (list '- (list '+ m2 m1)) 'length))
	   ((and x1 x2 a1 a2)
	    (list '+ (list '/ (list '* 'E 'thick 'width 'width 'width 
				    (list '- x1 x2)) 
			   'length 'length 'length)
		  (list '/ (list '* 'E 'thick 'width 'width 'width 
				 (list '- a2 a1)) 
			2 'length 'length))))))
  ;; y-force1
  (((0 5) (1 1) (1 5))  
   (lambda (y1 fy2 y2) 
     (cond (fy2)
	   ((and y1 y2)
	    (list '/ (list '* 'E 'width 'thick (list '- y1 y2)) 'length))))) 
  ;; moment1
  (((0 0) (0 4) (0 6) (1 2) (1 4) (1 6))
   (lambda (fx1 x1 a1 m2 x2 a2) 
     (cond ((and m2 fx1) (list '- (list '+ (list '* 'length fx1) m2)))
	   ((and x1 x2 a1 a2)
	    (list '+ (list '/ (list '* 'E 'thick 'width 'width 'width 
				    (list '- a1 a2)) 3 'length)
		  (list '/ (list '* 'E 'thick 'width 'width 'width 
				 (list '- x2 x1)) 2 'length 'length))))))
  ;; current1
  (((1 3))
   (lambda (i2)
     (cond (i2))))
  ;; x-displacement1
  (((0 0) (0 2) (1 4))
   (lambda (fx1 m1 x2)
     (cond ((and fx1 m1 x2)
	    (list '+ x2 (list '/ (list '* 4 'length 'length 'length fx1)
			      (list '* 'E 'thick 'width 'width 'width))
		  (list '/ (list '* 6 'length 'length m1)
			(list '* 'E 'thick 'width 'width 'width)))))))
  ;; y-displacement1
  (((0 1) (1 5))
   (lambda (fy1 y2)
     (cond ((fy1 y2) 
	    (list '+ y2 (list '/ fy1 (list '/ 'length 
					   (list '* 'width 'thick 'E))))))))
  ;; angle-displacement1
  (((0 0) (0 2) (1 6))
   (lambda (fx1 m1 a2)
     (cond ((fx1 m1 a2)
	    (list '+ a2 (list '/ (list '* 6 'length 'length fx1)
			      (list '* 'E 'thick 'width 'width 'width)) 
		  (list '/ (list '* 12 'length m1)
			(list '* 'E 'thick 'width 'width 'width)))))))
  ;; voltage1
  (((1 7))
   (lambda (v2)
     (cond (v2))))
  ;; x-force2
  (((1 2) (1 4) (1 6) (0 0) (0 2) (0 4) (0 6)) 
   (lambda (m2 x2 a2 fx1 m1 x1 a1) 
     (cond (fx1)
	   ((and m2 m1) (list '/ (list '+ m1 m2) 'length))
	   ((and x2 x1 a2 a1)
	    (list '+ (list '/ (list '* 'E 'thick 'width 'width 'width 
				    (list '- x2 x1)) 
			   'length 'length 'length)
		  (list '/ (list '* 'E 'thick 'width 'width 'width 
				 (list '- a2 a1)) 
			2 'length 'length))))))
  ;; y-force2
  (((1 5) (0 1) (0 5))  
   (lambda (y2 fy1 y1) 
     (cond (fy1)
	   ((and y2 y1)
	    (list '/ (list '* 'E 'width 'thick (list '- y2 y1)) 'length))))) 
  ;; moment2
  (((1 0) (1 4) (1 6) (0 2) (0 4) (0 6))
   (lambda (fx2 x2 a2 m1 x1 a1) 
     (cond ((and m1 fx2) (list '- (list '* 'length fx2) m1))
	   ((and x2 x1 a2 a1)
	    (list '+ (list '/ (list '* 'E 'thick 'width 'width 'width 
				    (list '- a2 a1)) 3 'length)
		  (list '/ (list '* 'E 'thick 'width 'width 'width 
				 (list '- x2 x1)) 2 'length 'length))))))
  ;; current2
  (((0 3))
   (lambda (i1)
     (cond (i1))))
  ;; x-displacement2
  (((1 0) (1 2) (0 4))
   (lambda (fx2 m2 x1)
     (cond ((and fx2 m2 x1)
	    (list '+ x1 (list '/ (list '* 4 'length 'length 'length fx2)
			      (list '* 'E 'thick 'width 'width 'width))
		  (list '- (list '/ (list '* 6 'length 'length m2)
				 (list '* 'E 'thick 'width 'width 'width))))))))
  ;; y-displacement2
  (((1 1) (0 5))
   (lambda (fy2 y1)
     (cond ((fy2 y1) 
	    (list '+ y1 (list '/ fy2 (list '/ 'length 
					   (list '* 'width 'thick 'E))))))))
  ;; angle-displacement2
  (((1 0) (1 2) (0 6))
   (lambda (fx2 m2 a1)
     (cond ((fx2 m2 a1)
	    (list '+ a1 (list '- (list '/ (list '* 6 'length 'length fx2)
				       (list '* 'E 'thick 'width 'width 'width)) )
		  (list '/ (list '* 12 'length m2)
			(list '* 'E 'thick 'width 'width 'width)))))))
  ;; voltage2
  (((0 7))
   (lambda (v1)
     (cond (v1)))))
 (((1 0 0 (- L)) (0 1 0 0) (0 1 0 0) (0 0 0 1))
  ((1 0 0 L) (0 1 0 0) (0 1 0 0) (0 0 0 1)))
 ((nil nil (integ integ integ none) power (trans-x trans-y rot-z elect) nil (west east south) nil)
  (nil nil (integ integ integ none) power (trans-x trans-y rot-z elect) nil (west north east) nil)))

(h-electrostatic-gap
 (gap-p gap-t length width1 width2)
 (;; x-force1
  (((0 4) (1 0) (1 4))  
   (lambda (x1 v1 fx2 x2 v3) 
     (cond ())))
  ;; y-force1
  (((0 2) (0 5) (0 6) (1 1) (1 2) (1 5) (1 6)) 
   (lambda (m1 y1 a1 fy2 m2 y2 a2) 
     (cond ())))
  ;; moment1
  (((0 1) (0 5) (0 6) (1 2) (1 5) (1 6))
   (lambda (fy1 y1 a1 m2 y2 a2) 
     (cond ())))
  ;; current1
  (((1 3))
   (lambda (i2)
     (cond (i2 (list '- i2)))))
  ;; x-displacement1
  (((1 4)) (lambda (x2) (cond (x2))))
  ;; y-displacement1
  (((1 5)) (lambda (y2) (cond (y2))))
  ;; angle-displacement1
  (((1 6)) (lambda (a2) (cond (a2))))
  ;; voltage1
  (((1 7)) (lambda (v2) (cond (v2))))
  ;; x-force2
  (((1 4) (0 0) (0 4))  
   (lambda (x2 fx1 x1) 
     (cond (fx1 (list '- fx1)) 
	   ((and x2 x1)
	    (list '/ (list '* 'E 'width 'thick (list '- x2 x1)) 'length))))) 
  ;; y-force2
  (((1 2) (1 5) (1 6) (0 1) (0 2) (0 5) (0 6)) 
   (lambda (m2 y2 a2 fy1 m1 y1 a1) 
     (cond (fy1 (list '- fy1))
	   ((and m2 m1) (list '/ (list '- (list '+ m1 m2)) 'length))
	   ((and y2 y1 a2 a1)
	    (list '+ (list '/ (list '* 'E 'thick 'width 'width 'width 
				    (list '- y2 y1)) 
			   'length 'length 'length)
		  (list '/ (list '* 'E 'thick 'width 'width 'width 
				 (list '- a1 a2)) 
			2 'length 'length))))))
  ;; moment2
  (((1 1) (1 5) (1 6) (0 2) (0 5) (0 6))
   (lambda (fy2 y2 a2 m1 y1 a1) 
     (cond ((and m1 fy2) (list '- (list '+ (list '* 'length fy2) m1)))
	   ((and y2 y1 a2 a1)
	    (list '- (list '/ (list '* 'E 'thick 'width 'width 'width 
				    (list '- a2 a1)) 3 'length)
		  (list '/ (list '* 'E 'thick 'width 'width 'width 
				 (list '- y2 y1)) 2 'length 'length))))))
  ;; current2
  (((0 3))
   (lambda (i1)
     (cond (i1 (list '- i1)))))
  ;; x-displacement2
  (((1 0) (0 4))
   (lambda (fx2 x1)
     (cond ((fx2 x1) 
	    (list '+ x1 (list '/ fx2 (list '/ 'length 
					   (list '* 'width 'thick 'E))))))))
  ;; y-displacement2
  (((1 1) (1 2) (0 5))
   (lambda (fy2 m2 y1)
     (cond ((and fy2 m2 y1)
	    (list '+ y1 (list '/ (list '* 4 'length 'length 'length fy2)
			      (list '* 'E 'thick 'width 'width 'width))
		  (list '/ (list '* 6 'length 'length m2)
			(list '* 'E 'thick 'width 'width 'width)))))))
  ;; angle-displacement2
  (((1 1) (1 2) (0 6))
   (lambda (fy2 m2 a1)
     (cond ((fy2 m2 a1)
	    (list '+ a1 (list '/ (list '* 6 'length 'length fy2)
			      (list '* 'E 'thick 'width 'width 'width)) 
		  (list '/ (list '* 12 'length m2)
			(list '* 'E 'thick 'width 'width 'width)))))))
  ;; voltage2
  (((0 7))
   (lambda (v1)
     (cond (v1)))))
 ()
 ((nil nil nil power (trans-x trans-y rot-z elect) nil (west north) nil)
  (nil nil nil power (trans-x trans-y rot-z elect) nil (north east) nil)
  (nil nil nil power (trans-x trans-y rot-z elect) nil (west south) nil)
  (nil nil nil power (trans-x trans-y rot-z elect) nil (east south) nil)))


(v-electrostatic-gap
 (gap-p gap-t length width1 width2)
 ()
 ()
 ((nil nil nil power (trans-x trans-y rot-z elect) nil (west south) nil)
  (nil nil nil power (trans-x trans-y rot-z elect) nil (west north) nil)
  (nil nil nil power (trans-x trans-y rot-z elect) nil (east south) nil)
  (nil nil nil power (trans-x trans-y rot-z elect) nil (north east) nil)))


(mass
 (length width thick E)
 (((6 12 18 24) 
   (lambda (fxn fxs fxw fxe) (cond ((and fxn fxs fxw fxe)
				    (list '- (list '+ fxn fxs fxw fxe))))))
  ((7 13 19 25)
   (lambda (xn xs xw xe) (cond ((and xn xs) (list '/ (list '+ xn xs) 2))
			       ((and xw xe) (list '/ (list '+ xw xe) 2)))))
  ((8 14 20 26) 
   (lambda (fyn fys fyw fye) (cond ((and fyn fys fyw fye)
				    (list '- (list '+ fyn fys fyw fye))))))
  ((9 15 21 27)
   (lambda (yn ys yw ye) (cond ((and yn ys) (list '/ (list '+ yn ys) 2))
			       ((and yw ye) (list '/ (list '+ yw ye) 2)))))
  ((10 16 22 28) 
   (lambda (mn ms mw me) (cond ((and mn ms mw me)
				    (list '- (list '+ mn ms mw me))))))
  ((11 17 23 29)
   (lambda (an as aw ae) (cond (ae ae) (an (- an *pi/2*)) (aw (- an *pi*))
			       (as (- as *pi* *pi/2*)))))    
  ((0 12 18 24) 
   (lambda (fxm fxs fxw fxe) (cond ((and fxm fxs fxw fxe)
				    (list '- (list '+ fxm fxs fxw fxe))))))
  ((1 13 19 25)
   (lambda (xm xs xw xe) (cond ((and xm xs) (list '- (list '* 2 xm) xs))
			       ((and xw xe xs) (list '+ xw xe (list '- xs))))))
  ((2 14 20 26) 
   (lambda (fym fys fyw fye) (cond ((and fym fys fyw fye)
				    (list '- (list '+ fym fys fyw fye))))))
  ((3 15 21 27)
   (lambda (ym ys yw ye) (cond ((and ym ys) (list '- (list '* 2 ym) ys))
			       ((and yw ye ys) (list '+ yw ye (list '- ys))))))
  ((4 16 22 28) 
   (lambda (mm ms mw me) (cond ((and mm ms mw me)
				    (list '- (list '+ mm ms mw me))))))
  ((5 17 23 29)
   (lambda (am as aw ae) (cond (am (+ am *pi/2*)) (ae (+ ae *pi/2*))
			       (aw (- aw *pi/2*)) (as (- as *pi*)))))    
  ((0 6 18 24) 
   (lambda (fxm fxn fxw fxe) (cond ((and fxm fxn fxw fxe)
				    (list '- (list '+ fxm fxn fxw fxe))))))
  ((1 7 19 25)
   (lambda (xm xn xw xe) (cond ((and xm xn) (list '- (list '* 2 xm) xn))
			       ((and xw xe xn) (list '+ xw xe (list '- xn))))))
  ((2 8 20 26) 
   (lambda (fym fyn fyw fye) (cond ((and fym fyn fyw fye)
				    (list '- (list '+ fym fyn fyw fye))))))
  ((3 9 21 27)
   (lambda (ym yn yw ye) (cond ((and ym yn) (list '- (list '* 2 ym) yn))
			       ((and yw ye yn) (list '+ yw ye (list '- yn))))))
  ((4 10 22 28) 
   (lambda (mm mn mw me) (cond ((and mm mn mw me)
				    (list '- (list '+ mm mn mw me))))))
  ((5 11 23 29)
   (lambda (am an aw ae) (cond (am (+ am *pi* *pi/2*)) (ae (+ ae *pi* *pi/2*))
			       (aw (+ aw *pi/2*)) (an (+ an *pi*)))))    
  ((0 6 12 24) 
   (lambda (fxm fxn fxs fxe) (cond ((and fxm fxe fxs fxn)
				    (list '- (list '+ fxm fxe fxs fxn))))))
  ((1 7 13 25)
   (lambda (xm xn xs xe) (cond ((and xm xe) (list '- (list '* 2 xm) xe))
			       ((and xs xn xe) (list '+ xs xn (list '- xe))))))
  ((2 8 14 26) 
   (lambda (fym fyn fys fye) (cond ((and fym fye fys fyn)
				    (list '- (list '+ fym fye fys fyn))))))
  ((3 9 15 27)
   (lambda (ym yn ys ye) (cond ((and ym ye) (list '- (list '* 2 ym) ye))
			       ((and ys yn ye) (list '+ ys yn (list '- ye))))))
  ((4 10 16 28) 
   (lambda (mm mn ms me) (cond ((and mm me ms mn)
				    (list '- (list '+ mm me ms mn))))))
  ((5 11 17 29)
   (lambda (am an as ae) (cond (am (+ am *pi*)) (ae (+ ae *pi*))
			       (an (+ an *pi/2*)) (as (- as *pi/2*)))))    
  ((0 6 12 18) 
   (lambda (fxm fxn fxs fxw) (cond ((and fxm fxw fxs fxn)
				    (list '- (list '+ fxm fxw fxs fxn))))))
  ((1 7 13 19)
   (lambda (xm xn xs xw) (cond ((and xm xw) (list '- (list '* 2 xm) xw))
			       ((and xs xn xw) (list '+ xs xn (list '- xw))))))
  ((2 8 14 20) 
   (lambda (fym fyn fys fyw) (cond ((and fym fyw fys fyn)
				    (list '- (list '+ fym fyw fys fyn))))))
  ((3 9 15 21)
   (lambda (ym yn ys yw) (cond ((and ym yw) (list '- (list '* 2 ym) yw))
			       ((and ys yn yw) (list '+ ys yn (list '- yw))))))
  ((4 10 16 22) 
   (lambda (mm mn ms mw) (cond ((and mm mw ms mn)
				    (list '- (list '+ mm mw ms mn))))))
  ((5 11 17 23)
   (lambda (am an as aw) (cond (am (+ am *pi*)) (aw (+ aw *pi*))
			       (an (+ an *pi/2*)) (as (- as *pi/2*))))))
 (((1 0 0 (- L)) (0 1 0 0) (0 1 0 0) (0 0 0 1))
  ((1 0 0 L) (0 1 0 0) (0 1 0 0) (0 0 0 1)))
 ((nil nil (deriv deriv deriv none) power (trans-x trans-y rot-z elect) nil (up) nil)
  (nil nil (deriv deriv deriv none) power (trans-x trans-y rot-z elect) nil (west) nil)
  (nil nil (deriv deriv deriv none) power (trans-x trans-y rot-z elect) nil (north) nil)
  (nil nil (deriv deriv deriv none) power (trans-x trans-y rot-z elect) nil (east) nil)
  (nil nil (deriv deriv deriv none) power (trans-x trans-y rot-z elect) nil (south) nil)))
